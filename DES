package crypto;

import java.io.File;
import java.io.FileWriter;
import java.io.IOException;
import java.math.BigInteger;
import java.util.logging.Level;
import java.util.logging.Logger;

/**
 *
 * @author Mohamed MotYim <mohamed.motyim@gmail.com>
 */
public class DES {

    private final String plaintext, Key;
    private final char operation; // D or E
    public String chipertext;
    private byte[] Input = new byte[64];
    private byte[] Keys = new byte[64];
    private final File f = new File("Files//DES//allKey.txt");
    private FileWriter fw = null;

    private final byte[] shift = {1, 1, 2, 2, 2, 2, 2, 2, 1, 2, 2, 2, 2, 2, 2, 1};
    private final byte[] shiftR = {0, 1, 2, 2, 2, 2, 2, 2, 1, 2, 2, 2, 2, 2, 2, 1};
    private final byte[] IP = {
        58, 50, 42, 34, 26, 18, 10, 2,
        60, 52, 44, 36, 28, 20, 12, 4,
        62, 54, 46, 38, 30, 22, 14, 6,
        64, 56, 48, 40, 32, 24, 16, 8,
        57, 49, 41, 33, 25, 17, 9, 1,
        59, 51, 43, 35, 27, 19, 11, 3,
        61, 53, 45, 37, 29, 21, 13, 5,
        63, 55, 47, 39, 31, 23, 15, 7
    };
    private final byte[] PC1 = {
        57, 49, 41, 33, 25, 17, 9,
        1, 58, 50, 42, 34, 26, 18,
        10, 2, 59, 51, 43, 35, 27,
        19, 11, 3, 60, 52, 44, 36,
        63, 55, 47, 39, 31, 23, 15,
        7, 62, 54, 46, 38, 30, 22,
        14, 6, 61, 53, 45, 37, 29,
        21, 13, 5, 28, 20, 12, 4
    };
    private final byte[] PC2 = {14, 17, 11, 24, 1, 5, 3, 28,
        15, 6, 21, 10, 23, 19, 12, 4,
        26, 8, 16, 7, 27, 20, 13, 2,
        41, 52, 31, 37, 47, 55, 30, 40,
        51, 45, 33, 48, 44, 49, 39, 56,
        34, 53, 46, 42, 50, 36, 29, 32};

    private final byte[] E
            = {
                32, 1, 2, 3, 4, 5,
                4, 5, 6, 7, 8, 9,
                8, 9, 10, 11, 12, 13,
                12, 13, 14, 15, 16, 17,
                16, 17, 18, 19, 20, 21,
                20, 21, 22, 23, 24, 25,
                24, 25, 26, 27, 28, 29,
                28, 29, 30, 31, 32, 1
            };
    private final byte SBoxes[][] = {
        /*s1*/{14, 4, 13, 1, 2, 15, 11, 8, 3, 10, 6, 12, 5, 9, 0, 7},
        {0, 15, 7, 4, 14, 2, 13, 1, 10, 6, 12, 11, 9, 5, 3, 8},
        {4, 1, 14, 8, 13, 6, 2, 11, 15, 12, 9, 7, 3, 10, 5, 0},
        {15, 12, 8, 2, 4, 9, 1, 7, 5, 11, 3, 14, 10, 0, 6, 13},
        /*s2*/ {15, 1, 8, 14, 6, 11, 3, 4, 9, 7, 2, 13, 12, 0, 5, 10},
        {3, 13, 4, 7, 15, 2, 8, 14, 12, 0, 1, 10, 6, 9, 11, 5},
        {0, 14, 7, 11, 10, 4, 13, 1, 5, 8, 12, 6, 9, 3, 2, 15},
        {13, 8, 10, 1, 3, 15, 4, 2, 11, 6, 7, 12, 0, 5, 14, 9},
        /*s3*/ {10, 0, 9, 14, 6, 3, 15, 5, 1, 13, 12, 7, 11, 4, 2, 8},
        {13, 7, 0, 9, 3, 4, 6, 10, 2, 8, 5, 14, 12, 11, 15, 1},
        {13, 6, 4, 9, 8, 15, 3, 0, 11, 1, 2, 12, 5, 10, 14, 7},
        {1, 10, 13, 0, 6, 9, 8, 7, 4, 15, 14, 3, 11, 5, 2, 12},
        /*s4*/ {7, 13, 14, 3, 0, 6, 9, 10, 1, 2, 8, 5, 11, 12, 4, 15},
        {13, 8, 11, 5, 6, 15, 0, 3, 4, 7, 2, 12, 1, 10, 14, 9},
        {10, 6, 9, 0, 12, 11, 7, 13, 15, 1, 3, 14, 5, 2, 8, 4},
        {3, 15, 0, 6, 10, 1, 13, 8, 9, 4, 5, 11, 12, 7, 2, 14},
        /*s5*/ {2, 12, 4, 1, 7, 10, 11, 6, 8, 5, 3, 15, 13, 0, 14, 9},
        {14, 11, 2, 12, 4, 7, 13, 1, 5, 0, 15, 10, 3, 9, 8, 6},
        {4, 2, 1, 11, 10, 13, 7, 8, 15, 9, 12, 5, 6, 3, 0, 14},
        {11, 8, 12, 7, 1, 14, 2, 13, 6, 15, 0, 9, 10, 4, 5, 3},
        /*s6*/ {12, 1, 10, 15, 9, 2, 6, 8, 0, 13, 3, 4, 14, 7, 5, 11},
        {10, 15, 4, 2, 7, 12, 9, 5, 6, 1, 13, 14, 0, 11, 3, 8},
        {9, 14, 15, 5, 2, 8, 12, 3, 7, 0, 4, 10, 1, 13, 11, 6},
        {4, 3, 2, 12, 9, 5, 15, 10, 11, 14, 1, 7, 6, 0, 8, 13},
        /*s7*/ {4, 11, 2, 14, 15, 0, 8, 13, 3, 12, 9, 7, 5, 10, 6, 1},
        {13, 0, 11, 7, 4, 9, 1, 10, 14, 3, 5, 12, 2, 15, 8, 6},
        {1, 4, 11, 13, 12, 3, 7, 14, 10, 15, 6, 8, 0, 5, 9, 2},
        {6, 11, 13, 8, 1, 4, 10, 7, 9, 5, 0, 15, 14, 2, 3, 12},
        /*s8*/ {13, 2, 8, 4, 6, 15, 11, 1, 10, 9, 3, 14, 5, 0, 12, 7},
        {1, 15, 13, 8, 10, 3, 7, 4, 12, 5, 6, 11, 0, 14, 9, 2},
        {7, 11, 4, 1, 9, 12, 14, 2, 0, 6, 10, 13, 15, 3, 5, 8},
        {2, 1, 14, 7, 4, 10, 8, 13, 15, 12, 9, 0, 3, 5, 6, 11}
    };
    private final byte[] P = {16, 7, 20, 21, 29, 12, 28, 17,
        1, 15, 23, 26, 5, 18, 31, 10,
        2, 8, 24, 14, 32, 27, 3, 9,
        19, 13, 30, 6, 22, 11, 4, 25};
    private final byte[] invIP =//ip-1
            {
                40, 8, 48, 16, 56, 24, 64, 32,
                39, 7, 47, 15, 55, 23, 63, 31,
                38, 6, 46, 14, 54, 22, 62, 30,
                37, 5, 45, 13, 53, 21, 61, 29,
                36, 4, 44, 12, 52, 20, 60, 28,
                35, 3, 43, 11, 51, 19, 59, 27,
                34, 2, 42, 10, 50, 18, 58, 26,
                33, 1, 41, 9, 49, 17, 57, 25

            };

    public DES(String plainText, String Key, char operation) {

        this.plaintext = plainText;
        this.Key = Key;
        this.operation = operation;
        try {
            this.fw = new FileWriter(f);
        } catch (IOException ex) {
            Logger.getLogger(DES.class.getName()).log(Level.SEVERE, null, ex);
        }

        hexToBin(plainText, Input); //covert message to binary
        hexToBin(Key, Keys); //covert key to binary
        Input = Permutation(IP, 64, Input);   //intial permaintion
        Keys = Permutation(PC1, 56, Keys); //PC-1 key

        //System.out.println(Arrays.toString(Input));
//        System.out.println(Arrays.toString(Keys));
        Rounds(); // 16 rounds
        Input = Permutation(invIP, 64, Input);
        StringBuilder s = new StringBuilder();
        for (byte J : Input) {
            s.append(J);
        }
        chipertext = s.toString();
        BigInteger b = new BigInteger(chipertext, 2);
        chipertext = b.toString(16);
        try {
            fw.close();
        } catch (IOException ex) {
            Logger.getLogger(DES.class.getName()).log(Level.SEVERE, null, ex);
        }
    }

    public static String tripleDES(String plain, String Key1, String Key2, String Key3, char o) {
        DES D1, D2, D3;
        if (o == 'E') {
            D1 = new DES(plain, Key1, 'E');
            D2 = new DES(D1.chipertext, Key2, 'E');
            D3 = new DES(D2.chipertext, Key3, 'E');
        } else {
            D1 = new DES(plain, Key1, 'D');
            D2 = new DES(D1.chipertext, Key2, 'D');
            D3 = new DES(D2.chipertext, Key3, 'D');
        }

        return D3.chipertext;
    }

    private void Rounds() {
        byte[] L = new byte[32];
        byte[] R = new byte[32];
        byte[] C = new byte[28];
        byte[] D = new byte[28];

        System.arraycopy(Keys, 0, C, 0, C.length);
        System.arraycopy(Keys, 28, D, 0, D.length);

        System.arraycopy(Input, 0, L, 0, L.length);
        System.arraycopy(Input, 32, R, 0, R.length);

        for (int i = 1; i <= 16; i++) {
            //--------- Key Schedule ----------------
            if (operation == 'E') {
                shiftKeyLeft(C, shift[i - 1]);
                shiftKeyLeft(D, shift[i - 1]);
            } else if (operation == 'D') {
                shiftKeyRight(D, shiftR[i - 1]);
                shiftKeyRight(C, shiftR[i - 1]);
            }

            Keys = new byte[56];
            System.arraycopy(C, 0, Keys, 0, C.length);
            System.arraycopy(D, 0, Keys, 28, D.length);
            Keys = Permutation(PC2, 48, Keys);//round key done
            printAllKeys(Keys);
            //--------- Decrpt ----------------
            byte[] temp = new byte[32];
            System.arraycopy(L, 0, temp, 0, temp.length);
            L = R;
            R = Efunction(R);
            for (int j = 0; j < R.length; j++) {
                R[j] = (byte) (R[j] ^ temp[j]);
            }
        }
        System.arraycopy(R, 0, Input, 0, 32);
        System.arraycopy(L, 0, Input, 32, 32);

    }

    private void shiftKeyLeft(byte[] Array, int s) {
        for (int i = 1; i <= s; i++) {
            byte temp = Array[0];
            for (int j = 1; j < Array.length; j++) {
                Array[j - 1] = Array[j];

            }
            Array[Array.length - 1] = temp;
        }
    }

    //convert hex to binary 
    private void hexToBin(String s, byte[] array) {
        String bin = "";
        for (int i = 0; i < s.length(); i++) {
            String numBin = Integer.toBinaryString(Integer.parseInt("" + s.charAt(i), 16));
            while (numBin.length() < 4) {
                numBin = "0" + numBin;
            }
            bin += numBin;
        }
        while (bin.length() < 64) {
            bin += "0";
        }
        for (int i = 0; i < array.length; i++) {
            array[i] = Byte.parseByte("" + bin.charAt(i));

        }
    }

    /**
     * Make  permutation <br>
     * P :take  PC1 ,PC2 ,IP and P <br>
     * Size : size of new array return<br>
     * in : take the new array put in like Keys;
     */
    private byte[] Permutation(byte[] p, int size, byte[] in) {
        byte[] temp = new byte[size];
        for (int i = 0; i < temp.length; i++) {
            temp[i] = in[p[i] - 1];
        }
        return temp;
    }

    private byte[] Efunction(byte[] R) {
        byte[] ER = new byte[48]; //expanison R
        byte[] NR = new byte[32]; //last R after S-Boxs
        for (int i = 0; i < ER.length; i++) {
            ER[i] = (byte) (R[E[i] - 1] ^ Keys[i]); // expansion and XOR with key
        }

        //--------- S-BOX ----------------
        for (int i = 0, j = 0; i < ER.length; i += 6, j += 4) {
            int row = (ER[i] * 2) + ER[i + 5] + j;
            int col = ER[i + 1] * 8 + ER[i + 2] * 4 + ER[i + 3] * 2 + ER[i + 4];
            String s = Integer.toBinaryString(SBoxes[row][col]);
            while (s.length() < 4) {
                s = "0" + s;
            }
            for (int k = 0; k < 4; k++) {
                NR[k + j] = Byte.parseByte("" + s.charAt(k));
            }
        }
        //--------- permintaion -----------

        return Permutation(P, 32, NR);
    }

    private void shiftKeyRight(byte[] Array, byte s) {

        for (int i = 1; i <= s; i++) {
            byte temp = Array[Array.length - 1];
            for (int j = Array.length - 1; j > 0; j--) {
                Array[j] = Array[j - 1];
            }
            Array[0] = temp;
        }

    }

    private void printAllKeys(byte[] Keys) {

        try {
            
            for (int i = 0;i< Keys.length ;i++) {
                if (i % 8 == 0 && i != 0) {
                    fw.append(' ');
                }
               fw.append(""+Keys[i]);
            }
            fw.append(System.lineSeparator());
            
        } catch (IOException ex) {
            Logger.getLogger(DES.class.getName()).log(Level.SEVERE, null, ex);
        }
        

    }

}
